name: Python Tests

on:
  # Triggers the workflow on all PRs and push events to the main branch
  pull_request:
  push:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  tests:
    name: ${{ matrix.session }} ${{ matrix.python-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { python-version: 3.9, os: ubuntu-latest, session: "pre-commit" }
          - { python-version: 3.9, os: ubuntu-latest, session: "flake8" }
          - { python-version: 3.9, os: ubuntu-latest, session: "mypy" }
          - { python-version: 3.9, os: ubuntu-latest, session: "safety" }
          - { python-version: 3.9, os: ubuntu-latest, session: "typeguard" }
          - { python-version: 3.9, os: ubuntu-latest, session: "tests" }
          - { python-version: 3.8, os: ubuntu-latest, session: "tests" }
          - { python-version: 3.9, os: windows-latest, session: "tests" }
          - { python-version: 3.9, os: macos-latest, session: "tests" }
          - { python-version: 3.9, os: ubuntu-latest, session: "build"}

    env:
      NOXSESSION: ${{ matrix.session }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Install Nox
        run: |
          pip install --constraint=.github/workflows/constraints.txt nox nox-poetry
          nox --version

      - name: Compute pre-commit cache key
        if: matrix.session == 'pre-commit'
        id: pre-commit-cache
        shell: python
        run: |
          import hashlib
          import sys

          python = "py{}.{}".format(*sys.version_info[:2])
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = "${{ runner.os }}-{}-{}-pre-commit".format(python, digest[:8])

          print("result={} >> $GITHUB_OUTPUT".format(result))

      - name: Restore pre-commit cache
        uses: actions/cache@v2.1.6
        if: matrix.session == 'pre-commit'
        with:
          path: ~/.cache/pre-commit
          key: ${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ steps.pre-commit-cache.outputs.result }}-

      - name: Run Nox
        if: matrix.session != 'build'
        run: |
          nox --force-color --python=${{ matrix.python-version }}
        working-directory: quantum-viz

      - name: Upload coverage data
        if: always() && matrix.session == 'tests'
        uses: "actions/upload-artifact@v2.2.4"
        with:
          name: coverage-data
          path: "quantum-viz/.coverage.*"

      - name: Combine coverage data and display human readable report
        if: always() && matrix.session == 'tests'
        run: |
          nox --force-color --session=coverage
        working-directory: quantum-viz

      - name: Create coverage report
        if: always() && matrix.session == 'tests'
        run: |
          nox --force-color --session=coverage -- xml
        working-directory: quantum-viz

      - name: Upload coverage report
        if: always() && matrix.session == 'tests'
        uses: codecov/codecov-action@v1.5.2

      - name: Bump version for developmental release
        if: "matrix.session == 'build'"
        run: |
          poetry version patch &&
          version=$(poetry version | awk '{ print $2 }') &&
          poetry version $version.dev.$(date +%s)
        working-directory: quantum-viz

      - name: Build package
        if: matrix.session == 'build'
        run: |
          poetry build --ansi
        working-directory: quantum-viz

      - name: Upload quantum-viz dist
        if: matrix.session == 'build'
        uses: actions/upload-artifact@v2.2.4
        with:
          name: dist
          path: quantum-viz/dist/*
